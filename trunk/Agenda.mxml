<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#FFFFFF" 
	creationComplete="init()" xmlns:comViews="mxml_views.*" xmlns:views="classes.views.*" xmlns:ns1="*">

	<mx:WebService id="WsAgenda" wsdl="{URLServices.AgendaServiceWSDL}">
	    <mx:operation name="AddEconomicEvent" result="AddEconomicEventResult(event)" fault="error(event)"/>
	</mx:WebService>

<mx:Metadata>
	<![CDATA[
	/**
    * Descripción: Este componente contiene la interfaz gráfica de la Agenda Administrativa y de la Agenda
    *              Económica. Ambas agendas se diferencian en la información complementaria. 
    **/
	]]>
</mx:Metadata>
<!-- Programador: Sebastián Guerra Guerrero -->
<!-- Fecha de Modificación: 23/11/2010 -->
<!-- Fecha de Modificación: 24/11/2010 -->

<mx:Script>
	<![CDATA[
		import mx.managers.PopUpManager;
		import mx.collections.ArrayCollection;
		import mx.rpc.events.ResultEvent;
		import mx.events.CloseEvent;
		import mx.core.Application;
		import mx.rpc.events.FaultEvent;
		import mx.controls.Alert;
		import misClases.URLServices;
		
		private var listClientsInComboBox:ArrayCollection = new ArrayCollection();
		private var rutClientEconomicEvent:String = "";
		
		/**
		*  Este método es utilizado para inicializar los estados de la agenda y seleccionar el estado base.
		*  @return No retorna valores
        */
		public function init():void
		{
			this.currentState = 'addAdministrativeEventState';
			this.currentState = 'addEconomicEventState';
			changeTypeState(0);
			showDialog();
		}
		
		/**
		*	Este método captura algúnn error generado por el webService WsAgenda.
		*   @param event Es el evento que genera el error.
     	*   @return No retorna valores.	
		*/
		public function error(event:FaultEvent):void
		{
		    Application.application.messagearea1.waitOFF();
			Application.application.messagearea1.stateFinish(); 			
		}
		/**
		*	Este método es utilizado para cambiar los distintos estados de la agenda, dado su índice.
		*   @param numberState Es el número del índice del estado al que se desea cambiar.
     	*   @return No retorna valores.	
		*/
		public function changeTypeState(numberState:int):void
		{
			this.cleanFields();
			switch (numberState)
			{
				
				case 0	:	this.currentState = null;
							(this.parentApplication as InterfazInterna).startSessionPanel.title = "Agenda";
							break;
				case 1	:	this.currentState = 'addAdministrativeEventState';
							(this.parentApplication as InterfazInterna).startSessionPanel.title = "Agenda > Agregar Evento Administrativo";
							break;
				case 2	:	this.currentState = 'addEconomicEventState';
							(this.parentApplication as InterfazInterna).startSessionPanel.title = "Agenda > Agregar Evento Económico";
							break;
			}	
		}
		/**
		*	Este método es utilizado para cambiar los distintos estados de la agenda según se cambie en el combobox de tipo de agenda.
     	*   @return No retorna valores.	
		*/
		public function changeStateEvent():void
		{				
			switch (this.comboboxTypeEvent.selectedLabel)
			{
				
				case "Evento Administrativo"	:	this.currentState = 'addAdministrativeEventState';
													(this.parentApplication as InterfazInterna).startSessionPanel.title = "Agenda > Agregar Evento Administrativo";
													break;
				case "Evento Económico"			:	this.currentState = 'addEconomicEventState';
													(this.parentApplication as InterfazInterna).startSessionPanel.title = "Agenda > Agregar Evento Económico";
													break;			
			}
		}	
		/**
		*	Este método es utilizado para cargar los valores del comboboxTypeEvent.
     	*   @return No retorna valores.	
		*/
  		private function loadTypes():void
   		{
   			this.comboboxTypeEvent.dataProvider = new ArrayCollection([{label:"Evento Administrativo",data:1},
																{label:"Evento Económico",data:2}]);
																  		
   		} 
		/**
		*	Este método es utilizado para agregar un nuevo evento económico. Este método se comunica con el webservice WsAgenda.
     	*   @return No retorna valores.	
		*/
		public function addEconomicEventCause():void
		{
			var economicEvent:Object = new Object();
			
			var hora:String = "";
			var minuto:String = "";
			
			if(this.dateFieldDate.text != "")
			{
				/*if(this.numericStepperHour.value < 10)
					hora = "0"+this.numericStepperHour.value.toString();
				else
					hora = this.numericStepperHour.value.toString();
				if(this.numericStepperMinute.value < 10)
					minuto = "0"+this.numericStepperMinute.value.toString();
				else
					minuto = this.numericStepperMinute.value.toString();	
				economicEvent.DateTime = this.dateFieldDate.text +" "+hora+":"+minuto+":00";*/
			}
			else
				economicEvent.DateTime = "";
			economicEvent.Name = this.textInputName.text;
			economicEvent.TotalAmount = this.textInputAmount.text;
			economicEvent.Motive = this.textInputMotive.text; 
			economicEvent.ClientFk = this.textInputRutClient.text;
			economicEvent.OtherEntity = this.textInputOtherEntity.text;
			economicEvent.NextNotificationDate = this.dateFieldNextNotification.text;
			economicEvent.RemoteNotificationDate = this.dateFieldRemoteNotification.text;
			economicEvent.Description = this.txtDescription.text;
			
			this.WsAgenda.AddEconomicEvent(economicEvent, Application.application.userNameSessionLabel.text); 
									
		}

	    /**
		*	Este método recibe el resultado de la inserción de un evento económico.
		*   @param event El evento que genera como resultado el llamado al metodo de inserción.
     	*   @return No retorna valores.	
		*/
		public function AddEconomicEventResult(event:ResultEvent):void
		{ 
			if(event.result as String =="success")
 			{			
 				this.cleanFields();
				Application.application.messagearea1.changueMessaje("Informacion", "28");
				this.changeTypeState(0);
 			}
 			else
 			{
 				if((event.result as String).substring(0,6) =="Error")
 				{
 					Application.application.messagearea1.changueMessaje("Error", "1");
 				}
 				else
 				{
 					Alert.show("Error en la conexión, intente más tarde.",'Mensaje del Sistema');
 				}
 			}
 			Application.application.messagearea1.waitOFF();
			Application.application.messagearea1.stateFinish();
	 	}

		/**
		*	Este método es utilizado limpiar todos los campos de texto de los distintos estados.
		*   Es mayormente utilizado cuando se producen cambios de estados. 
     	*   @return No retorna valores.	
		*/
		private function cleanFields():void
		{
			this.comboboxTypeEvent.selectedIndex = 0;
			this.dateFieldDate.text = "";
			this.textInputName.text = "";
			this.txtDescription.text = "";
			this.textInputRutUser.text = "";
			
			this.textInputAmount.text = "";
			this.textInputMotive.text = "";
			this.textInputRutClient.text = "";
			this.textInputOtherEntity.text = "";
		}
		
		/**
		*	Este método busca un cliente en la lista de clientes, dado un un RUT en el correspondiente
		*   texInput que se ingresa el RUT 
		*   @param event El evento se produce cuando es llamado este método.
     	*   @return No retorna valores.	
		*/
		private function findNameClient(event:Event):void
		{			
			var listEconomicEvents:ArrayCollection = (Application.application.ClientPanel.searchComp.table.dataProvider as ArrayCollection);
			this.listClientsInComboBox.removeAll();
						
			(this.comboBoxNameClient.dataProvider as ArrayCollection).removeAll();
			for (var i:int=0; i<listEconomicEvents.length; i++)
			{
				if((listEconomicEvents.getItemAt(i).Rut as String).search(this.textInputRutClient.text) != -1)
				{
					var name:String = listEconomicEvents.getItemAt(i).Names+" "+listEconomicEvents.getItemAt(i).LastName;
					var nameAndRutClient:Object = new Object();
					nameAndRutClient.Name = name;
					nameAndRutClient.Rut = listEconomicEvents.getItemAt(i).Rut;
					listClientsInComboBox.addItem(nameAndRutClient);
					
					(this.comboBoxNameClient.dataProvider as ArrayCollection).addItem(name);
				}
			}
		}
		/**
		*	Este método pone el rut del nombre seleccionado, en el textInput correspondiente.
     	*   @return No retorna valores.	
		*/
		private function setRutClientInTextInput():void
		{
			for (var i:int=0; i<listClientsInComboBox.length; i++)
			{
				if(listClientsInComboBox.getItemAt(i).Name == this.comboBoxNameClient.selectedLabel)
				{
					this.rutClientEconomicEvent = listClientsInComboBox.getItemAt(i).Rut;
					this.textInputRutClient.text = this.rutClientEconomicEvent; 		
				}
			}
		}
		/**
		*	Este método habilita o deshabilita el comboBox de nombres de clientes, para permitir o no permitir
		*   la selección de clientes. 
     	*   @return No retorna valores.	
		*/
		public function changeValueEnabledComboboxName():void
		{
			var value:Boolean = this.checkBoxSelect.selected; 
			if(value == true)
			{
				Application.application.ClientPanel.searchComp.parameters.selectedIndex = 0;
				Application.application.ClientPanel.searchComp.loadData();
				Application.application.ClientPanel.searchComp.searchInputField.enabled = false;
				Application.application.ClientPanel.searchComp.buttonClean.enabled = false;		
			}
			this.textInputRutClient.enabled = !value;
			this.comboBoxNameClient.enabled = !value;
			if(value && this.rutClientEconomicEvent != null)
			{
				setRutClientInTextInput();	
			}		
		}	
				
		/**
		 * Programador: Miguel Muñoz
		 * Método que nos permite mostrar el PopUp con la información del día
		 * @param no necesita parametros
		 * @return no retorna nada
		 * */
		private function showDialog():void
		{
			var scene:Sprite = Sprite (Application.application);
			var myDialog:PopUpDialog = new PopUpDialog();
			PopUpManager.addPopUp(myDialog,scene,true);
			PopUpManager.centerPopUp(myDialog);
		}
		
	]]>
</mx:Script>
	<mx:states>
		<mx:State name="addAdministrativeEventState">
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Form width="49%" height="220" borderStyle="solid" cornerRadius="5" left="10" top="10" paddingBottom="0" paddingTop="10">
					<mx:FormHeading label="Información Básica" width="100%" textAlign="center"/>
					<mx:FormItem label="Tipo" width="100%" height="30">
						<mx:ComboBox id="comboboxTypeEvent" width="200" creationComplete="this.loadTypes()" change="this.changeStateEvent()"></mx:ComboBox>
					</mx:FormItem>
					<mx:FormItem label="Fecha" width="100%" height="30">
						<mx:DateField width="200" id="dateFieldDate" formatString="DD-MM-YYYY"/>
					</mx:FormItem>
					<mx:FormItem label="Hora" width="100%" height="30">
						<mx:HBox width="200">
						</mx:HBox>
					</mx:FormItem>
					<mx:FormItem label="Nombre" width="100%" height="30">
						<mx:TextInput width="200" id="textInputName"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Canvas left="10" right="10" cornerRadius="5" borderStyle="solid" top="233" bottom="60">
					<mx:TextArea left="5" right="5" bottom="5" top="20" id="txtDescription"/>
					<mx:Label x="13" y="4" text="Descripción"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:RemoveChild target="{buttonSeeDetail}"/>
			<mx:RemoveChild target="{buttonAddTypeEvent}"/>
			<mx:RemoveChild target="{buttonDeleteEvent}"/>
			<mx:RemoveChild target="{buttonEditEvent}"/>
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Button label="Agregar" right="130" bottom="20" height="25" width="100" id="buttonAddNewEvent"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Button label="Cancelar" id="buttonCancel" right="20" bottom="20" height="25" width="100" click="changeTypeState(0)"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Form width="49%" height="220" cornerRadius="5" borderStyle="solid" id="form1" paddingBottom="0" paddingTop="10" x="324" y="10">
					<mx:FormHeading label="Información Complementaria" width="100%" textAlign="center"/>
					<mx:FormItem label="Tipo plazo" width="100%" height="25" id="formitem1">
						<mx:ComboBox width="200" id="comboboxTypeTerm"></mx:ComboBox>
					</mx:FormItem>
					<mx:FormItem label="Usuario" height="25" width="100%" id="formitem2">
						<mx:ComboBox width="200" id="comboboxNameUser"></mx:ComboBox>
					</mx:FormItem>
					<mx:FormItem label="RUT" width="100%" height="25" id="formitem4">
						<mx:TextInput width="200" id="textInputRutUser"/>
					</mx:FormItem>
					<mx:FormItem label="Avisos" width="100%" height="25" id="formitem5">
						<mx:HBox width="100%">
							<mx:DateField width="100" formatString="DD-MM-YYYY" id="dateFieldNextNotification"/>
							<mx:DateField width="100" formatString="DD-MM-YYYY" id="dateFieldRemoteNotification"/>
						</mx:HBox>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:RemoveChild target="{mainAgenda}"/>
		</mx:State>
		<mx:State name="addEconomicEventState" basedOn="addAdministrativeEventState">
			<mx:RemoveChild target="{formitem1}"/>
			<mx:RemoveChild target="{formitem2}"/>
			<mx:RemoveChild target="{formitem4}"/>
			<mx:AddChild relativeTo="{formitem5}" position="before">
				<mx:FormItem label="Monto" width="100%" height="25" id="formitem6">
					<mx:TextInput width="200" id="textInputAmount"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild relativeTo="{formitem5}" position="before">
				<mx:FormItem label="Motivo" width="100%" height="25">
					<mx:TextInput width="200" id="textInputMotive"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild relativeTo="{formitem5}" position="before">
				<mx:FormItem label="Cliente" width="100%" height="25">
					<mx:ComboBox width="200" id="comboBoxNameClient" change="this.setRutClientInTextInput()"></mx:ComboBox>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild relativeTo="{formitem5}" position="before">
				<mx:FormItem label="Otro ente" id="formitem3" width="100%" height="25">
					<mx:TextInput width="200" id="textInputOtherEntity"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:SetEventHandler target="{buttonAddNewEvent}" name="click" handler="addEconomicEventCause()"/>
			<mx:AddChild relativeTo="{formitem3}" position="before">
				<mx:FormItem label="RUT" height="25">
					<mx:HBox width="100%">
						<mx:TextInput width="200" id="textInputRutClient" change="this.findNameClient(event)"/>
						<mx:CheckBox label="Seleccionar" fontSize="9" id="checkBoxSelect" click="changeValueEnabledComboboxName()"/>
					</mx:HBox>
				</mx:FormItem>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Canvas x="0" y="0" width="100%" height="100%" backgroundColor="#FFFFFF" id="canvas3">
		<mx:Button label="Eliminar" id="buttonDeleteEvent" height="25" width="100" right="20" bottom="20"/>
		<mx:Button label="Editar" id="buttonEditEvent" height="25" width="100" right="130" bottom="20"/>
		<mx:Button label="Agregar" id="buttonAddTypeEvent" width="100" height="25" bottom="20" right="240" click="changeTypeState(1)"/>
		<mx:Button label="Ver detalle" id="buttonSeeDetail" right="350" bottom="20" width="100" height="25" click="currentState='a'"/>
		<ns1:main x="0" y="0" width="100%" height="89%" id="mainAgenda">
		</ns1:main>
	</mx:Canvas>
	
</mx:Canvas>
